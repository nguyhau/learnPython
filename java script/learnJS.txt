// Babel
1. We have used npm init to create the project
2. Execute the following command to install babel-cli
    npm install --save-dev babel-cli
3. Execute the following command to install babel-preset
    npm install --save-dev babel-preset-env
4. Execute the following command to install babel-core
   npm install --save-dev babel-core
5. Add indicator about babel script.
6. we need to create a file called .babelrc in the root folder   
7. To execute to es2015, following command is used
    npx babel index.js
8. We can store the output in the file by executing the command as shown below
    npx babel index.js --out-file index_es5.js

//
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>My First JavaScript</title>
</head>
<body>
<script src="code.js">
</script>
</body>
</html>


class myClass {
    constructor() {
        this.pro1 = "val1";
        this.pro2 = "val2";
    }
    privateSet(new_val1, new_val2) {
        this.pro1 = new_val1;
        this.pro2 = new_val2;
    }
    pubGet() {
        console.log("pro1: " + this.pro1 + " pro2: " + this.pro2);
    }
}

class child extends myClass{
    constructor(){
        super();
        this.pro3 = "val of child";
    }
    privateSet(new_val1, new_val2, new_val3) {
        this.pro1 = new_val1;
        this.pro2 = new_val2;
        this.pro3 = new_val3;
    }
    pubGet() {
        super.pubGet();        
        console.log("pro3: " + this.pro3);
    }
}

var child1 = new child();
child1.pubGet();
// Declare a class in js:
var myClass = (function() {
    var pro1 = "val1",
        pro2 = "val2";
        
    function privateSet(new_val1, new_val2) {
        pro1 = new_val1;
        pro2 = new_val2;
    }
    
    function pubGet() {
        console.log("pro1: " + pro1 + "pro2: " + pro2);
    }
    return {
        set: privateSet,
        get: pubGet
    };
})
myClass.set("1","3");
/*
 *
 **/
The following built-in types are available:
•string
•number
•boolean
•null and undefined
•object
•symbol (new to ES6)

Object:
    var obj = {    
        a: "hello world",    
        b: 42,    
        c: true
        };
    obj.a;      // "hello world"
    obj.b;      // 42
    obj.c;      // t
    obj["a"];   // "hello world"

    var b = "a";
    obj["b"]; // 42;
    obj[b]; // "hello world"

Array:
        var arr = [    "hello world",    
        42,
        true
        ];
        arr[0];         // "hello world"
        arr[1];         // 42
        arr[2];         // true
        arr.length;     // 3
        typeof arr;     // "object"
        
The  difference  between  ==  and  ===  is  usually  characterized  that  ==checks  for  value  equality  and  ===  checks  for  both  value  and  typeequality.
var a = "42";
var b = 42;
a == b;         // true
a === b;        // false
Arrays  are  by  default  coerced  to  strings  by  simplyjoining all the values with commas (,) in between        
var a = [1,2,3];
var b = [1,2,3];
var c = "1,2,3";
a == c;     // true
b == c;     // true
a == b;     // false

Variable  names  (including  function  names)  must  bevalid identifiers.
 An identifier must start with a-z, A-Z, $, or _. It can then contain anyof those characters plus the numerals 0-9.
 Conditionals
 if (a == 2) {
    // do something
 }else if (a == 10) {
    // do another thing
 }
 
 switch (a) {
    case 2:
        // do something
        break;
    case 10:
        // do another thing
        break;
    case 42:
        // do yet another thing
        break;
    default:
        // fallback to here
    }
 
 ES5  added  a  “strict  mode”  to  the  language,  which  tightens  the  rulesfor  certain  behaviors.
 Generally,  these  restrictions  are  seen  as  keeping the code to a safer and more appropriate set of guidelines. Also,adhering  to  strict  mode  makes  your  code  generally  more  optimizable by the engine
 
 Functions as Values
 var foo = function() {
            // ..
            };
 var x = function bar(){
            // ..
            };
            
Immediately Invoked Function Expressions (IIFEs)
(function IIFE(){    
    console.log( "Hello!" );
})();// "Hello!"
An Immediately-invoked Function Expression (IIFE for friends) is a way to execute functions immediately, as soon as they are created.            

Object và Function (call, apply and bind)
let user = {
  userName: "haophan",
  displayName: "HaoPhan",
  sendMessage: function (message) {
    console.log(`Sending ${message} to ${this.displayName}`);
  }
}
let student = {
  displayName: "rohan"
}

user.sendMessage("Hello..."); // Sending Hello... to HaoPhan.
user.sendMessage.call(student, "Hello from HaoPah"); // Sending Hello from HaoPah to rohan.
user.sendMessage.apply(student, ["Hello from HaoPah"]); // Sending Hello from HaoPah to rohan.
--> (params of apply is array)
let sendMsg = user.sendMessage.bind(student);
sendMsg("AAA"); // Sending AAA to rohan.


Modules
Modules  let  you  define  private  implementation  details  (vari‐ables, functions) that are hidden from the outside world, as well as apublic API that is accessible from the outside
function User(){
    var username, password;
    function doLogin(user,pw) {
        username = user;
        password = pw;
        // do the rest of the login work    
    }
    var publicAPI = {
        login: doLogin    
    };
    return publicAPI;
}
// create a `User` module instance
var fred = User();
fred.login( "fred", "12Battery34!" );
Executing  User()  creates  an  instance  of  the  User  module—a  wholenew  scope  is  created,  and  thus  a  whole  new  copy  of  each  of  theseinner variables/functions. 
We assign this instance to fred. If we runUser() again, we’d get a new instance entirely separate from fred

"mx-3 px-0