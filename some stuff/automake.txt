1. Generating configure.ac
    + autoscan: create autoscan.log and configure.scan
    + mv configure.scan configure.ac
    + vim configure.ac : 
        + AC_INIT
        + Integrating the checking (autoconf) part and the building (automake) part: AM_INIT_AUTOMAKE(pippo, 2.6), AC_OUTPUT(Makefile src/Makefile)
2. Generating suitable Makefiles    
    + $ vim Makefile.am: AUTOMAKE_OPTIONS, SUBDIRS 
    + $ vim src/Makefile.am: bin_PROGRAMS = targetbinary1
                             targetbinary1_SOURCES = targetbinary1.c myheader.h [...]
3. Making tools output the configure script and Makefile templates
    + $ aclocal: generates a file aclocal.m4
    + $ autoheader: create config.h.in file
    + $ automake --add-missing: for each Makefile.am produces a Makefile.in
                will add a generic version of the INSTALL file as well as the COPYING file containing the text of the current version of the GNU General Public License existing at the time of this Automake
                (autoreconf -vfi)
    + $ autoconf: autom4te.cache and configure 
4. Use
    + $ ./configure: for each Makefile requested in AC_OUTPUT(), translate the Makefile.in template for generating the final Makefile
    + $ make: The target all from the main Makefile will be worked
    + # make install
    
//============================================================================================
AC_INIT([hellochao], [2.0], [abcd])
AC_CONFIG_SRCDIR([src/hello.c])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([foreign])

AC_OUTPUT(Makefile src/Makefile)

  AC_INIT  
  AC_CONFIG_SRCDIR
  AC_CONFIG_HEADER
  AM_INIT_AUTOMAKE
  
  AC_PROG_CC
  AC_OUTPUT
//====================================
AC_INIT (package, version, [bug-report], [tarname], [url])
   The following M4 macros (e.g., AC_PACKAGE_NAME), output variables (e.g., PACKAGE_NAME), and preprocessor symbols (e.g., PACKAGE_NAME), are defined by AC_INIT:
    AC_PACKAGE_NAME, PACKAGE_NAME
        Exactly package.
    AC_PACKAGE_TARNAME, PACKAGE_TARNAME
        Exactly tarname, possibly generated from package.
    AC_PACKAGE_VERSION, PACKAGE_VERSION
        Exactly version.
    AC_PACKAGE_STRING, PACKAGE_STRING
        Exactly ‘package version’.
    AC_PACKAGE_BUGREPORT, PACKAGE_BUGREPORT
        Exactly bug-report, if one was provided. Typically an email address, or URL to a bug management web page.
    AC_PACKAGE_URL, PACKAGE_URL
        Exactly url, if one was provided. If url was empty, but package begins with ‘GNU ’, then this defaults to ‘http://www.gnu.org/software/tarname/’
AC_CONFIG_SRCDIR (unique-file-in-source-dir): unique-file-in-source-dir is some file that is in the package's source directory;

AC_CONFIG_HEADERS (header ..., [cmds], [init-cmds]): 4.6 Performing Configuration Actions
AM_INIT_AUTOMAKE([OPTIONS]): Runs many macros required for proper operation of the generated Makefiles
AC_OUTPUT ([file]..., [extra-cmds], [init-cmds]): Generate config.status. config.status performs all the configuration actions: all the output files (AC_CONFIG_FILES), header files (AC_CONFIG_HEADERS), commands (AC_CONFIG_COMMANDS), links (AC_CONFIG_LINKS), subdirectories to configure (AC_CONFIG_SUBDIRS) are honored. 

    The use of AC_OUTPUT with arguments is deprecated. This obsoleted interface is equivalent to:

              AC_CONFIG_FILES(file...)
              AC_CONFIG_COMMANDS([default],
                                 extra-cmds, init-cmds)
              AC_OUTPUT

//=============================================================
    your source files --> [autoscan*] --> [configure.scan] --> configure.ac
     
     configure.ac --.
                    |   .------> autoconf* -----> configure
     [aclocal.m4] --+---+
                    |   `-----> [autoheader*] --> [config.h.in]
     [acsite.m4] ---'
     
     Makefile.in              
     
     
     [acinclude.m4] --.
                      |
     [local macros] --+--> aclocal* --> aclocal.m4
                      |
     configure.ac ----'
     
     configure.ac --.
                    +--> automake* --> Makefile.in
     Makefile.am ---'
     
                            .-------------> [config.cache]
     configure* ------------+-------------> config.log
                            |
     [config.h.in] -.       v            .-> [config.h] -.
                    +--> config.status* -+               +--> make*
     Makefile.in ---'                    `-> Makefile ---'
     
     
     Autoconf Language:
     - There must not be any white space between the macro name and the open parenthesis
     - Arguments should be enclosed within the quote characters ‘[’ and ‘]’, and be separated by commas. This rule applies recursively for every macro call, including macros called from other macros.
     - Some macros take optional arguments, which this documentation represents as [arg]. You may just leave them empty, or use ‘[]’ to make the emptiness of the argument explicit, or you may simply omit the trailing commas.
     Standard configure.ac Layout:
       Autoconf requirements
       AC_INIT(package, version, bug-report-address)
       information on the package
       checks for programs
       checks for libraries
       checks for header files
       checks for types
       checks for structures
       checks for compiler characteristics
       AM_PROG_CC: This is an obsolescent macro that checks that the C compiler supports the -c and -o options together
       checks for library functions
       checks for system services
       AC_CONFIG_FILES([file...])
       AC_OUTPUT
       
       The one real requirement of Automake is that your configure.ac call AM_INIT_AUTOMAKE
       
       
3. Making tools output the configure script and Makefile templates
    + $ aclocal: 
            Configuration requirements, configure.ac contain: AM_INIT_AUTOMAKE, AC_CONFIG_FILES, AC_OUTPUT
            
    + $ autoheader: create config.h.in file
    + $ automake --add-missing: for each Makefile.am produces a Makefile.in
                will add a generic version of the INSTALL file as well as the COPYING file containing the text of the current version of the GNU General Public License existing at the time of this Automake
                (autoreconf -vfi)
    + $ autoconf: autom4te.cache and configure 
4. Use
    + $ ./configure: for each Makefile requested in AC_OUTPUT(), translate the Makefile.in template for generating the final Makefile
    + $ make: The target all from the main Makefile will be worked
    + # make install       
	
/************************************************************************************
 * Automake for Indicator
 ************************************************************************************/	
 /** File configure.ac **/
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
AC_INIT([indicator], [2.0], [tam.tranvan@toshiba-tsdv.com])
AC_CONFIG_SRCDIR([src/indicator.c])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE([1.9.6 -Wall -Werror dist-bzip2])

# Remember externally set CFLAGS
EXTERNAL_CFLAGS="$CFLAGS"

# Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LIBTOOL

AM_PATH_GTK_2_0([2.10.0],,AC_MSG_ERROR([Gtk+ 2.10.0 or higher required.]))

# Reset the externally set CFLAGS after calling AC_PROG*
CFLAGS="$EXTERNAL_CFLAGS"

AC_SUBST([CORE_CFLAGS])
AC_SUBST([CORE_LIBS])

# Use the C language and compiler for the following checks
AC_LANG([C])

# Checks for libraries.
PKG_CHECK_MODULES([GLIB], [glib-2.0], [have_libglib=yes], [have_libglib=no])
AM_CONDITIONAL([GLIB], [test "$have_libglib" = "yes"])

CORE_CFLAGS="$GTK_CFLAGS"
CORE_LIBS="$GTK_LIBS"

PKG_CHECK_MODULES([XRANDR], [xrandr], [
    CORE_CFLAGS="$CORE_CFLAGS $XRANDR_CFLAGS"
    CORE_LIBS="$CORE_LIBS $XRANDR_LIBS"
    AC_DEFINE([ENABLE_XRANDR],[1],[Define to enable XRANDR support.])
    CONFIG_XRANDR=yes],[AC_MSG_WARN([XRANDR is not supported])])

PKG_CHECK_MODULES([X11], [x11], [
    CORE_CFLAGS="$CORE_CFLAGS $X11_CFLAGS"
    CORE_LIBS="$CORE_LIBS $X11_CFLAGS"
    AC_DEFINE([ENABLE_X11],[1],[Define to enable X11 support.])
    CONFIG_X11=yes],[AC_MSG_WARN([X11 is not supported])])

PKG_CHECK_MODULES([UDEV], [libudev], [
    CORE_CFLAGS="$CORE_CFLAGS $UDEV_CFLAGS"
    CORE_LIBS="$CORE_LIBS $UDEV_LIBS"
    AC_DEFINE([ENABLE_UDEV],[1],[Define to enable UDEV support.])
    CONFIG_UDEV=yes],[AC_MSG_WARN([UDEV is not supported])])

PKG_CHECK_MODULES([PTHREAD], [pthread-stubs], [
    CORE_CFLAGS="$CORE_CFLAGS $PTHREAD_CFLAGS"
    CORE_LIBS="$CORE_LIBS $PTHREAD_LIBS"
    AC_DEFINE([ENABLE_PTHREAD],[1],[Define to enable PTHREAD support.])
    CONFIG_PTHREAD=yes],[AC_MSG_WARN([PTHREAD is not supported])])

CORE_LIBS="$CORE_LIBS -ltzcs -ltzcs-security"

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h libintl.h locale.h stdlib.h string.h sys/ioctl.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_CHECK_FUNCS([memset select setlocale strdup])

# Add debug support
AC_ARG_ENABLE(debug,
  AS_HELP_STRING(
    [--enable-debug],[enable debugging, default: no]),
    [case "${enableval}" in
      yes) debug=true ;;
      no)  debug=false ;;
      *)   AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
    esac],
    [debug=false])
AM_CONDITIONAL(DEBUG, test x"$debug" = x"true")
AM_COND_IF(DEBUG,
    AC_DEFINE(DEBUG,[1],[Define to 0 if this is a release build]),
    AC_DEFINE(DEBUG,[0],[Define to 1 or higher if this is a debug build]))

# Add control panel support
AC_ARG_ENABLE(ctrlpanel,
  AS_HELP_STRING(
    [--enable-ctrlpanel],[enable control panel, default: no]),
    [case "${enableval}" in
      yes) ctrlpanel=true ;;
      no)  ctrlpanel=false ;;
      *)   AC_MSG_ERROR([bad value ${enableval} for --enable-ctrlpanel]) ;;
    esac],
    [ctrlpanel=false])
AM_CONDITIONAL(CTRLPANEL, test x"$ctrlpanel" = x"true")
AM_COND_IF(CTRLPANEL,
    AC_DEFINE(ENABLE_CTRLPANEL,[1],[Try to use ctrlpanel feature]),
    AC_DEFINE(ENABLE_CTRLPANEL,[0],[Not try to use ctrlpanel feature]))

# Disable switch mode of monitor
AC_ARG_ENABLE(switchmode,
  AS_HELP_STRING(
    [--disable-switchmode],[disable switch mode of monitor, default: yes]),
    [case "${enableval}" in
      yes) switchmode=true ;;
      no)  switchmode=false ;;
      *)   AC_MSG_ERROR([bad value ${enableval} for --disable-switchmode]) ;;
    esac],
    [switchmode=true])
AM_CONDITIONAL(SWITCHMODE, test x"$switchmode" = x"true")
AM_COND_IF(SWITCHMODE,
    AC_DEFINE(DISBALE_SWITCHMODE,[0],[Enable monitor switch mode on Indicator]),
    AC_DEFINE(DISABLE_SWITCHMODE,[1],[Disable monitor switch mode on Indicator]))

AC_CONFIG_FILES([Makefile
                 src/Makefile])
AC_OUTPUT

/** File Makefile.am **/
SUBDIRS = \
	  src/
	  
/** File src/Makefile.am **/	  
if DEBUG
  AM_CFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/include -Iconfig.h -Wall -g -O3
else
  AM_CFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/include -Iconfig.h -Wall -O3
endif

AM_CFLAGS += $(GLIB_CFLAGS)

bin_PROGRAMS = indicator
indicator_SOURCES = indicator.c \
		    helper.c \
		    hdmi_certificate.c \
		    gui.c \
		    monitor.c \
		    network.c \
		    touchpad.c \
		    battery.c  \
		    brightness.c

# Require core libs
indicator_CPPFLAGS = @CORE_CFLAGS@
indicator_LDADD = @CORE_LIBS@

CLEANFILES = *~


/*** Makefile ***/
