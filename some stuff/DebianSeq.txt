
/******************************************************
    Section 3.1.1, “Stage 1: the BIOS”
 ******************************************************/
The BIOS is the 1st stage of the boot process which is started by the power-on event. The BIOS residing on the read only memory (ROM) is executed from the particular memory address to which the program counter of CPU is initialized by the power-on event.

This BIOS performs the basic initialization of the hardware (POST: power on self test) and hands the system control to the next step which you provide.
The BIOS startup screen usually indicates what key(s) to press to enter the BIOS setup screen to configure the BIOS behavior. 
The hardware location and the priority of the code started by the BIOS can be selected from the BIOS setup screen.

Typically, the system is booted from the specified partition of the primary hard disk partition. First 2 sectors of the hard disk on legacy PC contain the master boot record (MBR). The disk partition information including the boot selection is recorded at the end of this MBR. The first boot loader code executed from the BIOS occupies the rest of this MBR. 
/******************************************************
    Section 3.1.2, “Stage 2: the boot loader”
 ******************************************************/    
 The boot loader is the 2nd stage of the boot process which is started by the BIOS. It loads the system kernel image and the initrd image to the memory and hands control over to them. This initrd image is the root filesystem image and its support depends on the bootloader used.
 The default install of the Debian system places first-stage GRUB boot loader code into the MBR for the PC platform. 
 For GRUB Legacy, the menu configuration file is located at "/boot/grub/menu.lst".
 For GRUB 2, the menu configuration file is located at "/boot/grub/grub.cfg". It is automatically generated by "/usr/sbin/update-grub" using templates from "/etc/grub.d/*" and settings from "/etc/default/grub".
 
 menuentry "Debian GNU/Linux" {
        set root=(hd0,3)
        linux /vmlinuz root=/dev/hda3 #"root=UUID=81b289d5-4341-4003-9602-e254a17ac232 ro"
        initrd /initrd.img
}
/******************************************************
    Section 3.1.3, “Stage 3: the mini-Debian system”
 ******************************************************/
 The mini-Debian system is the 3rd stage of the boot process which is started by the boot loader. It runs the system kernel with its root filesystem on the memory. 
 The "/init" script is executed as the first program in this root filesystem on the memory. It is a shell script program which initializes the kernel in user space and hands control over to the next stage.   
/******************************************************
    Section 3.1.4, “Stage 4: the normal Debian system”
 ******************************************************/
  The system kernel for the mini-Debian system continues to run in this environment. The root filesystem is switched from the one on the memory to the one on the real hard disk filesystem.
  The init program is executed as the first program with PID=1 to perform the main boot process of starting many programs. 
  The default file path for the init program is "/sbin/init"
  The default init program has been changing:

    Debian before squeeze uses the simple SysV-style init.

    Debian wheezy improves the SysV-style init by ordering the boot sequence with LSB header and starting boot scripts in parallel.

    Debian jessie switches its default init to the systemd for the event-driven and parallel initialization.

+ SysV-init ===================================================
The SysV-style boot process essentially goes through the following.

    The Debian system goes into runlevel N (none) to initialize the system by following the "/etc/inittab" description.

    The Debian system goes into runlevel S to initialize the system under the single-user mode to complete hardware initialization etc.

    The Debian system goes into one of the specified multi-user runlevels (2 to 5) to start the system services.

The initial runlevel used for multi-user mode is specified with the "init=" kernel boot parameter or in the "initdefault" line of the "/etc/inittab". The Debian system as installed starts at the runlevel 2.

All actual script files executed by the init system are located in the directory "/etc/init.d/".

-The System V init system executes several processes, following instructions from the /etc/inittab file. The first program that is executed (which corresponds to the sysinit step) is /etc/init.d/rcS, a script that executes all of the programs in the /etc/rcS.d/ directory.

After this stage, init takes over and starts the programs enabled in the default runlevel (which is usually runlevel 2). It executes /etc/init.d/rc 2, a script that starts all services which are listed in /etc/rc2.d/

All the scripts contained in the various /etc/rcX.d directories are really only symbolic links pointing to the actual scripts which are stored in /etc/init.d/.
Finally, init starts control programs for various virtual consoles (getty). It displays a prompt, waiting for a username, then executes login user to initiate a session. 
+ Systemd:================================================================
Systemd executes several processes, in charge of setting up the system: keyboard, drivers, filesystems, network, services.
Systemd view the system as a whole, and the requirements of the components. Each component is described by a “unit file” (sometimes more);    
Unit files are stored under /lib/systemd/system/ and /etc/systemd/system/; 


Since unit files are declarative rather than scripts or programs, they cannot be run directly, and they are only interpreted by systemd; utility is systemctl.
///================================
systemctl set-default multi-user.target
systemctl get-default
systemd.unit=multi-user.target

You can choose the boot-time target unit by setting the symbolic link /etc/systemd/system/default.target


