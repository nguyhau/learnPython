/*************************************************
 *  Embedded Linux From Scratch
 *************************************************/
 /*************************************************
 *  1. Building Linux Kernel
 *************************************************/
 1. Getting the Linux sources from http://kernel.org
 2. Start with a minimalistic kernel configuration: make allnoconfig
 3. Adding settings specific to the embedded system:
    make xconfig
    or 
    make menuconfig (need setup ncurses package): sudo apt-get install libncurses5-dev libncursesw5-dev
    or 
    make defconfig (recheck by make menu config)
   (Some other choice: make defconfig, make allyesconfig, make allmodconfig)
 4. Compiling: make
 5. Result: compressed kernel image  "arch/x86/boot/bzImage"
/*************************************************
 *  2. Building BusyBox: BusyBox combines many common UNIX utilities into a single small executable
 *************************************************/
 1. Getting the sources from  http://busybox.net
 2. Configuring BusyBox: (Choosing to build a statically, natively compiled executable) 
    make xconfig
    or 
    make menuconfig
 3. Compiling busybox:
    make  
 4. Pre­installing busybox (in the _install/ subdirectory):
    make install    
 /*************************************************
 *  3. Creating a Ramdisk
 *************************************************/
 1. Creating an empty file with a 4000K size: (size >= size of _install/ of busybox)
    dd if=/dev/zero of=rootfs.img bs=1k count=4000
 2. Formating this file for the ext2  filesystem:
    mkfs.ext2 ­i 1024 ­F rootfs.img   
 /*************************************************
 *  4. Building Root File System
 *************************************************/
 1. Creating a mount point:
    mkdir /mnt/rootfs
 2. Mounting the root filesystem image:
    mount ­o loop rootfs.img /mnt/rootfs  
 3. Copying the busybox file structure into the mounted image:
    sudo rsync ­a busybox/_install/ /mnt/rootfs/  (need setup rsync package)
    chown ­R root:root /mnt/rootfs/ 
 4. Flushing the changes into the mounted filesystem image:
    sync    
 /* Create */    
 1. Create directory structure 
    cd /mnt/rootfs/
    mkdir dev etc proc sys
 2. Create Device nodes
    sudo mknod -m 600 dev/console c 5 1
    sudo mknod -m 666 dev/null c 1 3
    sudo mknod -m 660 dev/ram0 b 1 0
    sudo mknod -m 666 dev/tty c 5 0
    sudo mknod -m 600 dev/tty1 c 4 1
	major: device driver.
	minnor: 1-125
 3. Create environment 
    /*
        The kernel will start a program called init
        The init process reads ”/etc/inittab” to determine how to create processes
        A runlevel is a software configuration that allows only a selected group of processes to exist
    */
    vi etc / inittab
        # id:runlevels:action:process
        # id: A unique sequence of 1-4 characters which identifies an entry in inittab
        # runlevels: May contain multiple characters for different runlevels allowing a particular process to run at multiple runlevels
        # action: Describes which action should be taken
        #          respawn: restarted whenever it terminates
        #          wait: started once and will wait for its termination.
        #          sysinit: executed during system boot (...)
        # process: Specifies the process to be executed
        # This is run first script
        ::sysinit:/etc/init.d/rcS
        # Start an "askfirst" shell on the console
        ::askfirst:­/bin/sh
        # Stuff to do when restarting the init process
        ::restart:/sbin/init
        # Stuff to do before rebooting
        ::ctrlaltdel:/sbin/reboot
        ::shutdown:/bin/umount ­a ­r 
    #vi etc / passwd
        root :0:0: root:/root:/bin/sh
    vi etc / groups
        root ::0: root
    vi etc / fstab
        proc / proc proc defaults 0 0
        /dev/ram0 / ext2 defaults 1 1
    # init rcS file 
    mkdir etc/init.d
    vi etc/init.d/rcS
        #!/bin/sh
        mount ­t proc none /proc
        mount ­t sysfs none /sys
        ifconfig eth0 172.20.0.2
        route add default gw 172.20.0.1
        /usr/sbin/httpd ­h /www/ &
        /bin/sh
  /********** System Structure ***********/        
  |-- bin
  | ‘-- addgroup -> busybox, (...)
  |-- dev
  | ‘-- console, null, ram0, tty, tty1
  |-- etc
  | ‘-- fstab, groups, inittab, passwd
  |-- linuxrc -> bin/busybox
  |-- proc
  |-- sbin
  | ‘-- arp -> ../bin/busybox, (...)
  ‘-- usr
  |-- bin
  | ‘-- [ -> ../../bin/busybox, (...)
  ‘-- sbin
  ‘-- brctl -> ../../bin/busybox, (...)
 /*************************************************
 *  5. Packing the System
 *************************************************/
  Test on QEMU
  /* Setup qemu*/
  /* Run */
   qemu 
   ­m 32 \
   ­hda rootfs.img \
   ­kernel linux­2.6.25.4/arch/x86/boot/bzImage \
   ­append "root=/dev/sda"
   /* cd to directory contained rootfs.img file*/
   qemu-system-x86_64 -hda rootfs.img -kernel linux-4.8.6/arch/x86/boot/bzImage -append "root=/dev/sda console=ttyS0 rw" -nographic

** Quit qemu **   Ctrl A C
/********************************************************************
 * Linux kernel
 ********************************************************************/   
 /***************************************************
  * Configuration component (Vietnamese reference)
  **************************************************/
  1. Code Maturity Level Options
  2. Loadable Module Support
  3. Processor Type and Features
  4. General Setup
   Choice the support device:  ISA, PCI, PCMCIA
  5. Memory Technology Devices
  6. Block Devices
  7. Multi-Device support (RAID and LVM)
  8. ATA/IDE/MFM/RLL support
  9. Cryptography Support (CryptoAPI)
  10. Networking Options
  11. SCSI Support
  12. Character Devices
  13. File Systems

 /***************************************************
  * Linux Start-Up Sequence
  **************************************************/  
  /* 1. Boot Loader Phase */
        - Hardware Initialization 
            1. Configuring the CPU speed
            2. Memory initialization, such as setting up the registers, clearing the memory,
            and determining the size of the onboard memory
            3. Turning on the caches
            4. Setting up the serial port for the boot console
            5. Doing the hardware diagnostics or the POST (Power On Self-Test diagnostics)
        - Downloading Kernel Image and Initial Ram Disk: 
            1. Read ELF header of Kernel Image
            2. Load kernel image into memory
            3. Load image of initial Ram Disk into memory
        - Setting Up Argument
            The boot loader has to set up a memory area for argument passing, initialize it with the required data
            structures (that can be identified by the Linux kernel), and then fill them up with the required values.
        - Jumping to Kernel Entry Point
            The kernel entry point is decided by the linker script when building the kernel
            Once the boot loader jumps to the kernel entry point, its job is done and it is of no use.
  /* 2. Kernel Start Up */
        - CPU/Platform-Specific Initialization
        - Subsystem Initialization 
            1.Scheduler initialization
            2. Memory manager initialization
            3. Virtual File Systems initialization
        - Driver Initialization 
        - Mount Root File System 
            1. The initial ram disk: initrd
            2. Network-based file system using NFS
            3. Flash-based file system:  the kernel will mount a root file system loaded on
               initrd. The file systems normally used are romfs and ext2 file systems.
        - Doing Initcall and Freeing Initial Memory 
        - Moving to User Space
  /* 3. User Space Initialization */
        - The sbin/init process and /etc/inittab
            1. The runlevel
                0 – Halt the system
                1 – Single-user mode (used for administrative purposes)
                2 – Multi-user mode with restricted networking capabilities
                3 – Full multi-user mode
                4 – Unused
                5 – Graphics mode (X11™)
                6 – Reboot state
            2. The inittab file format.    
                1 The default run level.
                2 The actions to be taken when initis moved to a run level. Typically a script /etc/rc.d/rcis invoked with the run level as the    argument.
                3. The process that needs to be executed during system start-up. This is typically the file /etc/rc.d/rc.sysinit file.
                4. init can respawn a process if it is so configured in the inittabfile. This feature is used for respawning the log-in process after  a user haslogged out from his previous log-in.
                5 Actions to trap special events such as Ctrl-Alt_Del or power failure
        - The rc.sysinit file
            This file does the system initialization before the services are started. Typically this file does the following on an embedded system.
            1. Mount special file systems such as proc, ramfs
            2. Create directories and links if necessary
            3. Set the hostname for the system
            4. Set up networking configuration on the system
        - Starting Service 
             The script /etc/rc.d/rcs responsible for starting the services.
             
mount devicefile dir              
umount dir 

/***************************************************************************
 *  virtual box 
 ***************************************************************************/
 - sysfs is a ram-based filesystem initially based on ramfs. It provides
a means to export kernel data structures, their attributes, and the 
linkages between them to userspace.
- Tmpfs is a file system which keeps all files in virtual memory.
- VFS: The Virtual File System (also known as the Virtual Filesystem Switch)
is the software layer in the kernel that provides the filesystem
interface to userspace programs. It also provides an abstraction
within the kernel which allows different filesystem implementations to
coexist

//
http://superuser.com/questions/42134/how-do-i-enable-the-shared-clipboard-in-virtualbox
C:\Program Files\Oracle\VirtualBox
Business Adventures
http://www.vitalsofttech.com/add-disk-storage-to-oracle-virtualbox-with-linux/
sudo fdisk -l -> list all partition
sudo fdisk /dev/sdb -> to set partition (n: create, default, default, type: primary , w: write&save)
sudo mkfs.ext4 /dev/sdb1 -> to format partition 
mkdir -p /NewPartition
sudo mount /dev/sdb1 /NewPartition
chown nguyhau /NewPartition/
add "/dev/sdb1               /NewPartition           ext4    defaults        1 2" to /etc/fstab

/**************************************************
 * config proxy: apt config proxy
 */
  sudo vi /etc/apt/apt.conf: Acquire::http::proxy "http://proxy.company.com:80/";
  
/********************************************************************
 * Linux sequence: http://duartes.org/gustavo/blog/post/motherboard-chipsets-memory-map/
 * http://duartes.org/gustavo/blog/archives/
 ********************************************************************/
 1. BIOS:
    After RESET is asserted, some registers of the processor (includingcsandeip) are set
  to fixed values, and the code found at physical address0xfffffff0is executed. This
  address is mapped by the hardware to a certain read-only, persistent memory chip
  that is often called Read-Only Memory (ROM). The set of programs stored in ROM
  is traditionally called the Basic Input/Output System(BIOS).
    The BIOS uses Real Mode addresses because they are the only ones available when
the computer is turned on, the code that initializes the GDT, LDT, and paging tables must run in Real Mode.
    Linux is forced to use BIOS in the bootstrapping phase, when it must retrieve the
kernel image:
  - Executes a series of tests on the computer hardware to establish which devices
    are present and whether they are working properly; make use of theAdvanced Configuration and Power Interface(ACPI) standard.
  - Initializes the hardware devices. This phase is crucial in modern PCI-based architectures, because it guarantees that all hardware devices operate without conflicts on the IRQ lines and I/O ports. At the end of this phase, a table of installed PCI devices is displayed.  
  - Searches for an operating system to boot.
  - As soon as a valid device is found, it copies the contents of its first sector into
RAM, starting from physical address0x00007c00, and then jumps into that
address and executes the code just loaded.
 2. Boot Loader:
    The boot loader is the program invoked by the BIOS to load the image of an operating system kernel into RAM.
    The first sector of the hard disk, named the Master Boot Record(MBR), includes the partition table and a small program,
  that allows users to select the operating system to be booted.  
    LILO may be installed either on the MBR (replacing the small program that loads the boot sector of 
  the active partition) or in the boot sector of every disk partition.
  The MBR or the partition boot sector includes a small boot loader, which is loaded into RAM starting from address0x00007c00 by the BIOS.
  This small program moves itself to the address 0x00096a00, sets up the Real Mode stack (ranging from 0x00098000 down to 0x000969ff), loads the second part of the LILO boot loader into RAM starting from address 0x00096c00, and jumps into it.the LILO boot loader, which relies on BIOS routines, performs essentially the following operations:
  - Invokes a BIOS procedure to load an initial portion of the kernel image from disk: the first 512 bytes of the kernel image are put in RAM at address 0x00090000
  - Invokes a BIOS procedure to load the rest of the kernel image from disk and puts the image in RAM 
    starting from either low address 0x00010000(for small kernel images compiled with make zImage) 
    or high address 0x00100000(for big kernel images compiled with make bzImage)
  - Jumps to the setup( )code
 3. setup( ) Function:
  - In ACPI-compliant systems, it invokes a BIOS routine that builds a table in RAM describing the layout of the system’s physical memory 
  - Sets the keyboard repeat delay and rate
  - Initializes the video adapter card.
  - Reinitializes the disk controller and determines the hard disk parameters
  - Checks for an IBM Micro Channel bus (MCA).
  - Checks for a PS/2 pointing device (bus mouse).
  - Checks for Advanced Power Management (APM) BIOS support.
  - If the kernel image was loaded low in RAM (at physical address 0x00010000), the function moves it to 
  physical address 0x00001000. Conversely, if the kernel image was loaded high in RAM, the function does not move it. 
  - Sets up a provisional Interrupt Descriptor Table (IDT) and a provisional Global Descriptor Table (GDT).
  - Switches the CPU from Real Mode to Protected Mode by setting thePEbit in the cr0status register.
  - Jumps to the startup_32( )assembly language function
 4. startup_32( )
  - Initializes the segmentation registers and a provisional stack. 
  - Clears all bits in the eflags register
  - Fills the area of uninitialized data of the kernel identified by the_edata and _end symbols with zeros
  - Invokes the decompress_kernel( )function to decompress the kernel image. If the kernel image was loaded low, 
  the decompressed kernel is placed at physical address 0x00100000. Otherwise, if the kernel image was loaded high, the decompressed kernel is placed in a temporary buffer located after the compressed image. The decompressed image is then moved into its final position, which starts at physical address 0x00100000.
  - Jumps to physical address 0x00100000.
  Then the first Linux process (process 0). The function performs the following operations:
  - Initializes the segmentation registers with their final values
  - Fills the bss segment of the kernel with zeros.
  - Initializes the provisional kernel Page Tables contained in swapper_pg_dir and pg0
  to identically map the linear addresses to the same physical addresses
  - Stores the address of the Page Global Directory in the cr3 register, and enables paging 
  by setting the PG bit in thecr0register.
  - Sets up the Kernel Mode stack for process 0
  - Invokessetup_idt( )to fill the IDT with null interrupt handlers
  - Puts the system parameters obtained from the BIOS and the parameters passed to the operating system into the first page frame
  - Identifies the model of the processor.
  - Loads the gdtr and idtr registers with the addresses of the GDT and IDT tables.
  - Jumps to the start_kernel( )function.
 5. start_kernel( ):
  - The scheduler is initialized by invoking the sched_init() function
  - The memory zones are initialized by invoking thebuild_all_zonelists()function
  - The Buddy system allocators are initialized by invoking the page_alloc_init() and mem_init()functions  
  - The final initialization of the IDT is performed by invoking trap_init( ) and init_IRQ( ) 
  - The kernel thread for process 1 is created by invoking thekernel_thread( )function. 
  In turn, this kernel thread creates the other kernel threads and executes the /sbin/init program  
  
/**
 * Debug with gdb
 ***/  
 /******* Build kernel **********/
 make mrproper
 make x86_64_defconfig
 cat <<EOF >.config-fragment
 CONFIG_DEBUG_INFO=y
 CONFIG_DEBUG_KERNEL=y
 CONFIG_GDB_SCRIPTS=y
 EOF
 ./scripts/kconfig/merge_config.sh .config .config-fragment
 make -j"$(nproc)"
 /** run and debug **/
 https://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu
 1. qemu-system-x86_64 -s -S -hda rootfs.img -kernel /home/nguyhau/try/kernel/linux-stable/arch/x86/boot/bzImage -append "root=/dev/sda console=ttyS0 rw" -nographic 
 2. cd /home/nguyhau/try/kernel/linux-stable/arch/x86/boot
	gdb ./vmlinux.bin
 3. target remote localhost:1234
 4. <set break point > 
 5. c (continue)
 6. s (step in)
 7. n (next)
 8. q (quit)
 9. bt (backtrace)
 /*
  * Quit qemu: ctrl a c 
  **/